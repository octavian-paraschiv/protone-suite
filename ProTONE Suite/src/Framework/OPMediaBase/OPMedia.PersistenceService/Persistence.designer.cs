//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 12/15/2016 11:20:43 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace MainContext
{

    [DatabaseAttribute(Name = "main")]
    [ProviderAttribute(typeof(Devart.Data.SQLite.Linq.Provider.SQLiteDataProvider))]
    public partial class MainDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(MainDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertPersistedObject(PersistedObject instance);
        partial void UpdatePersistedObject(PersistedObject instance);
        partial void DeletePersistedObject(PersistedObject instance);

        #endregion

        public MainDataContext() :
        base(GetConnectionString("MainDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public MainDataContext(MappingSource mappingSource) :
        base(GetConnectionString("MainDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public MainDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public MainDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public MainDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public MainDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<PersistedObject> PersistedObjects
        {
            get
            {
                return this.GetTable<PersistedObject>();
            }
        }
    }
}

namespace MainContext
{

    /// <summary>
    /// There are no comments for MainContext.PersistedObject in the schema.
    /// </summary>
    [Table(Name = @"""main"".PersistedObjects")]
    public partial class PersistedObject : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _PersistenceID;

        private string _PersistenceContext;

        private string _Content;

        private System.Nullable<long> _Reserved;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnPersistenceIDChanging(string value);
        partial void OnPersistenceIDChanged();
        partial void OnPersistenceContextChanging(string value);
        partial void OnPersistenceContextChanged();
        partial void OnContentChanging(string value);
        partial void OnContentChanged();
        partial void OnReservedChanging(System.Nullable<long> value);
        partial void OnReservedChanged();
        #endregion

        public PersistedObject()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PersistenceID in the schema.
        /// </summary>
        [Column(Storage = "_PersistenceID", CanBeNull = false, DbType = "CHAR NOT NULL", IsPrimaryKey = true)]
        public string PersistenceID
        {
            get
            {
                return this._PersistenceID;
            }
            set
            {
                if (this._PersistenceID != value)
                {
                    this.OnPersistenceIDChanging(value);
                    this.SendPropertyChanging();
                    this._PersistenceID = value;
                    this.SendPropertyChanged("PersistenceID");
                    this.OnPersistenceIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PersistenceContext in the schema.
        /// </summary>
        [Column(Storage = "_PersistenceContext", CanBeNull = false, DbType = "CHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PersistenceContext
        {
            get
            {
                return this._PersistenceContext;
            }
            set
            {
                if (this._PersistenceContext != value)
                {
                    this.OnPersistenceContextChanging(value);
                    this.SendPropertyChanging();
                    this._PersistenceContext = value;
                    this.SendPropertyChanged("PersistenceContext");
                    this.OnPersistenceContextChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Content in the schema.
        /// </summary>
        [Column(Storage = "_Content", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Content
        {
            get
            {
                return this._Content;
            }
            set
            {
                if (this._Content != value)
                {
                    this.OnContentChanging(value);
                    this.SendPropertyChanging();
                    this._Content = value;
                    this.SendPropertyChanged("Content");
                    this.OnContentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Reserved in the schema.
        /// </summary>
        [Column(Storage = "_Reserved", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Reserved
        {
            get
            {
                return this._Reserved;
            }
            set
            {
                if (this._Reserved != value)
                {
                    this.OnReservedChanging(value);
                    this.SendPropertyChanging();
                    this._Reserved = value;
                    this.SendPropertyChanged("Reserved");
                    this.OnReservedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
